When Does Stack Overflow Occur?
Recursion Depth: Stack overflow happens when the number of recursive calls exceeds the stackâ€™s capacity. For example:
On a system with a 1 MB stack and 100 bytes per frame, the limit might be around 10,000 calls.
Exact limits vary by compiler, OS, and settings (e.g., GCC on Linux might allow more with optimization or a custom stack size).
Testing the Limit:
Try running the first example with increasing values of n (e.g., 100, 1000, 5000, 10000) to see where it fails on your system.
//
Preventing Stack Overflow:
Iterative Solution: Replace recursion with a loop to avoid stacking frames
#include<stdio.h>
int sum(int n);

int main()
{
    int n = 10000;
    int result = sum(n);
    printf("Sum of 1 to %d is %d\n", n, result);
    return 0;
}

int sum(int n)
{
    int total = 0;
    for (int i = 1; i <= n; i++)
    {
        total += i;
    }
    return total;
}
Real-World Stack Overflow Example:
If you want to deliberately trigger a stack overflow with no base case:
#include<stdio.h>
void infiniteRecursion(int n)
{
    printf("n = %d\n", n);
    infiniteRecursion(n + 1);  // No base case!
}

int main()
{
    infiniteRecursion(1);
    return 0;
}
his will print increasing values of n until the stack overflows and crashes.
